/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 SpaceStation.glb
Author: re1monsen (https://sketchfab.com/re1monsen)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/space-station-3-a7a6ad10261149cab31aa394bfcf8940
Title: Space Station 3
*/

import React, { useEffect } from 'react'
import { useGLTF, useAnimations } from '@react-three/drei'
import { useFrame } from '@react-three/fiber';
import * as THREE from 'three'; // Import Three.js to access LoopRepeat

export function SpaceStation(props) {
  const group = React.useRef()
  const { nodes, materials, animations } = useGLTF('/models/SpaceStation.glb')
  const { actions, names } = useAnimations(animations, group)

  // --- Animation Activation Logic ---
  useEffect(() => {
    console.log("SpaceStation Animation Clip Names:", names); // Log all names
    console.log("SpaceStation Animation Actions:", actions); // Log all actions

    // Specifically target the animation named "animation"
    const targetAnimationName = "animation";
    const animationAction = actions[targetAnimationName];

    if (animationAction) {
      console.log(`Attempting to play animation: "${targetAnimationName}"`);
      // Set the animation to loop indefinitely
      animationAction.setLoop(THREE.LoopRepeat, Infinity);
      // Reset any previous state, fade in, and play
      animationAction.reset().fadeIn(0.5).play();

      // Optional: Log animation details for deeper debugging
      console.log(`Animation "${targetAnimationName}" duration:`, animationAction.getClip().duration);
      console.log(`Animation "${targetAnimationName}" enabled:`, animationAction.enabled);
      console.log(`Animation "${targetAnimationName}" paused:`, animationAction.paused);

    } else {
      console.warn(`Animation clip "${targetAnimationName}" not found or action is undefined.`);
      // Fallback: if 'animation' isn't found, try the first one
      if (names.length > 0 && actions[names[0]]) {
        console.log(`Falling back to playing animation: "${names[0]}"`);
        actions[names[0]].reset().fadeIn(0.5).play();
      }
    }

    // Cleanup function: This runs when the component unmounts or before the effect re-runs.
    // It stops all active animations to prevent memory leaks.
    return () => {
      Object.values(actions).forEach(action => action.fadeOut(0.5).stop());
    };
  }, [actions, animations, names]); // Dependencies

  // Optional: Add a subtle continuous rotation on top of GLTF animations
  useFrame(() => {
    if (group.current) {
      group.current.rotation.y += 0.001; // Rotate slowly around the Y-axis
    }
  });

  return (
    <group ref={group} {...props} dispose={null}>
      <group name="Sketchfab_Scene">
        <group name="Sketchfab_model" rotation={[-2.044, -0.213, -0.061]} scale={2.701}>
          <group name="root">
            <group name="GLTF_SceneRootNode" rotation={[Math.PI / 2, 0, 0]}>
              <group name="SpaceStation_low_0">
                <mesh name="Object_4" geometry={nodes.Object_4.geometry} material={materials.spacestation_main2} />
              </group>
              <group name="SpaceStation001_low_1">
                <mesh name="Object_6" geometry={nodes.Object_6.geometry} material={materials.spacestation_smalllights} />
              </group>
              <group name="SpaceStation002_low_2">
                <mesh name="Object_8" geometry={nodes.Object_8.geometry} material={materials.spacestation_main2} />
              </group>
              <group name="SpaceStation003_low_3">
                <mesh name="Object_10" geometry={nodes.Object_10.geometry} material={materials.spacestation_main2} />
              </group>
              <group name="SpaceStation004_low_4">
                <mesh name="Object_12" geometry={nodes.Object_12.geometry} material={materials.spacestation_main} />
              </group>
              <group name="SpaceStation005_low_5">
                <mesh name="Object_14" geometry={nodes.Object_14.geometry} material={materials.spacestation_main} />
              </group>
              <group name="SpaceStation006_low_6" rotation={[Math.PI, -0.545, Math.PI]}>
                <mesh name="Object_16" geometry={nodes.Object_16.geometry} material={materials.spacestation_main} />
              </group>
              <group name="SpaceStation007_low_7">
                <mesh name="Object_18" geometry={nodes.Object_18.geometry} material={materials.spacestation_main} />
              </group>
            </group>
          </group>
        </group>
      </group>
    </group>
  )
}

useGLTF.preload('/models/SpaceStation.glb')
